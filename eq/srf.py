"""
http://hypocenter.usc.edu/research/SRF/
"""
import unittest
import io


def load(fp):
    version = _read_line(fp).strip()
    if version == '1.0':
        ret = _parse_1_0(fp)
    elif version == '1.1':
        ret = _parse_1_1(fp)
    else:
        raise NotImplementedError('Unsupported version: {}'.format(version))
    ret['version'] = version
    return ret


def _parse_1_1(fp):
    ret = {}
    section_name, n = _read_line(fp).split()
    if section_name == 'PLANE':
        ret['plane'] = _parse_plane_section_1_1(fp, int(n))
        section_name, n = _read_line(fp).split()
    assert section_name == 'POINTS'
    ret['points'] = _parse_points_section_1_1(fp, int(n))
    return ret


_parse_1_0 = _parse_1_1 # todo: reference?


def _parse_points_section_1_1(fp, n):
    return [_parse_point_1_1(fp) for _ in range(n)]


def _parse_point_1_1(fp):
    """
    lon:	longitude of point source
    lat:	latitude of point source
    dep:	depth (km) of point source
    stk:	strike
    dip:	dip
    area:	area of “point” source (cm*cm)
    tinit:	initiation time (when rupture reaches subfault center)
    dt:	time step in slip velocity function
    rake:	direction of u1 axis (rake direction)
    slip1:	total slip (cm) in u1 direction
    nt1:	number of time points in slip velocity function for u1 direction
    slip2:	total slip (cm) in u2 direction
    nt2:	number of time points in slip velocity function for u2 direction
    slip3:	total slip (cm) in u3 (surface normal) direction
    nt3:	number of time points in slip velocity function for u3 direction
    sv1[1],...,sv1[nt1]:	slip velocity at each time step for u1 direction
    sv2[1],...,sv2[nt2]:	slip velocity at each time step for u2 direction
    sv3[1],...,sv3[nt3]:	slip velocity at each time step for u3 direction
    """

    ret = {}
    ret['lon'], ret['lat'], ret['dep'], ret['stk'], ret['dip'], ret['area'], ret['tinit'], ret['dt'] \
        = [float(x) for x in _read_line(fp).split()]
    rake, slip1, nt1, slip2, nt2, slip3, nt3 = _read_line(fp).split()
    ret['rake'] = float(rake)
    ret['slip1'] = float(slip1)
    ret['nt1'] = int(nt1)
    ret['slip2'] = float(slip2)
    ret['nt2'] = int(nt2)
    ret['slip3'] = float(slip3)
    ret['nt3'] = int(nt3)
    ret['sv1'] = _parse_sv_1_1(fp, ret['nt1'])
    ret['sv2'] = _parse_sv_1_1(fp, ret['nt2'])
    ret['sv3'] = _parse_sv_1_1(fp, ret['nt3'])
    return ret


def _parse_sv_1_1(fp, n):
    ret = []
    if n > 0:
        for line in fp:
            ret.extend(float(x) for x in line.split())
            if len(ret) >= n:
                break
    assert len(ret) == n
    return ret


def _parse_plane_section_1_1(fp, n):
    return [_parse_plane_1_1(fp) for _ in range(n)]


def _parse_plane_1_1(fp):
    """
    elon:	top center longitude
    elat:	top center latitude
    nstk:	# of subfaults along strike
    ndip:	# of subfaults down-dip
    len:	fault length
    wid:	fault width
    stk:	fault strike
    dip:	fault dip
    dtop:	depth to top of fault
    shyp:	along strike location (from top center) of hypocenter
    dhyp:	down-dip location (from top edge) of hypocenter
    """

    ret = {}
    elon, elat, nstk, ndip, len_, wid = _read_line(fp).split()
    ret['elon'] = float(elon)
    ret['elat'] = float(elat)
    ret['nstk'] = int(nstk)
    ret['ndip'] = int(ndip)
    ret['len'] = float(len_)
    ret['wid'] = float(wid)
    ret['stk'], ret['dip'], ret['dtop'], ret['shyp'], ret['dhyp'] = [float(x) for x in _read_line(fp).split()]
    return ret


def _read_line(fp):
    line = fp.readline()
    assert line
    return line


class _Tester(unittest.TestCase):

    def test_load_1_0(self):
        fp = io.StringIO("""1.0
PLANE 1
 -118.5150   34.3440    20    25    20.00    25.00
 122   40     5.00     0.00    18.75
POINTS 2
 -118.6049   34.3864    5.3214  122   40  1.00000e+10     7.4390  1.00000e-01
  90    18.67     16     0.00      0     0.00      0
  0.00000e+00  1.21778e+00  2.43557e+00  9.76408e-01  8.95040e-01  8.13673e-01
  7.32306e-01  6.50938e-01  5.69571e-01  4.88204e-01  4.06837e-01  3.25469e-01
  2.44102e-01  1.62735e-01  8.13673e-02  0.00000e+00
 -118.5956   34.3816    5.3214  122   40  1.00000e+10     7.1882  1.00000e-01
  90    46.59     16     0.00      0     0.00      0
  0.00000e+00  1.21778e+00  2.43557e+00  9.76408e-01  8.95040e-01  8.13673e-01
  7.32306e-01  6.50938e-01  5.69571e-01  4.88204e-01  4.06837e-01  3.25469e-01
  2.44102e-01  1.62735e-01  8.13673e-02  0.00000e+00""")
        ret = load(fp)
        self.assertAlmostEqual(
            ret,
            {'plane': [{'nstk': 20,
                        'shyp': 0.0,
                        'elat': 34.344,
                        'len': 20.0,
                        'dhyp': 18.75,
                        'wid': 25.0,
                        'dip': 40.0,
                        'dtop': 5.0,
                        'elon': -118.515,
                        'stk': 122.0,
                        'ndip': 25}],
             'points': [{'slip2': 0.0,
                         'lon': -118.6049,
                         'slip3': 0.0,
                         'nt1': 16,
                         'area': 10000000000.0,
                         'lat': 34.3864,
                         'nt3': 0,
                         'tinit': 7.439,
                         'sv1': [0.0, 1.21778, 2.43557, 0.976408, 0.89504, 0.813673, 0.732306, 0.650938, 0.569571, 0.488204, 0.406837, 0.325469, 0.244102, 0.162735, 0.0813673, 0.0],
                         'dep': 5.3214,
                         'stk': 122.0,
                        'sv2': [],
                         'dt': 0.1,
                         'dip': 40.0,
                         'nt2': 0,
                         'rake': 90.0,
                         'slip1': 18.67,
                         'sv3': []},
                        {'slip2': 0.0,
                         'lon': -118.5956,
                         'slip3': 0.0,
                         'nt1': 16,
                         'area': 10000000000.0,
                         'lat': 34.3816,
                         'nt3': 0,
                         'tinit': 7.1882,
                         'sv1': [0.0, 1.21778, 2.43557, 0.976408, 0.89504, 0.813673, 0.732306, 0.650938, 0.569571, 0.488204, 0.406837, 0.325469, 0.244102, 0.162735, 0.0813673, 0.0],
                         'dep': 5.3214,
                         'stk': 122.0,
                         'sv2': [],
                         'dt': 0.1,
                         'dip': 40.0,
                         'nt2': 0,
                         'rake': 90.0,
                         'slip1': 46.59,
                         'sv3': []}],
             'version': '1.0'})

    def test_load_1_1(self):
        fp = io.StringIO("""1.1
POINTS 1
 -115.7455   33.3779    4.5624  312   90  1.02789e+09     1.8918  1.00000e-01
   0  -996.72    146   -45.65    146     0.00      0
 -0.00000e+00 -8.53627e+01 -1.54920e+02 -2.10866e+02 -2.55125e+02 -2.89382e+02
 -3.15109e+02 -3.33592e+02 -3.45952e+02 -3.53164e+02 -3.56075e+02 -3.55421e+02
 -3.51835e+02 -3.45867e+02 -3.37989e+02 -3.28605e+02 -3.18061e+02 -3.06653e+02
 -2.94632e+02 -2.82208e+02 -2.69559e+02 -2.56833e+02 -2.44153e+02 -2.31620e+02
 -2.19314e+02 -2.07302e+02 -1.95634e+02 -1.84350e+02 -1.73479e+02 -1.63040e+02
 -1.53047e+02 -1.43507e+02 -1.34422e+02 -1.25789e+02 -1.17602e+02 -1.09853e+02
 -1.02531e+02 -9.56232e+01 -8.91155e+01 -8.29932e+01 -7.72407e+01 -7.18419e+01
 -6.67808e+01 -6.20410e+01 -5.76065e+01 -5.34613e+01 -4.95899e+01 -4.59770e+01
 -4.26081e+01 -3.94689e+01 -3.65458e+01 -3.38256e+01 -3.12959e+01 -2.89446e+01
 -2.67605e+01 -2.47327e+01 -2.28510e+01 -2.11057e+01 -1.94877e+01 -1.79884e+01
 -1.65997e+01 -1.53139e+01 -1.41240e+01 -1.30231e+01 -1.20050e+01 -1.10638e+01
 -1.01939e+01 -9.39033e+00 -8.64815e+00 -7.96290e+00 -7.33042e+00 -6.74679e+00
 -6.20840e+00 -5.71186e+00 -5.25406e+00 -4.83206e+00 -4.44317e+00 -4.08487e+00
 -3.75483e+00 -3.45089e+00 -3.17104e+00 -2.91343e+00 -2.67635e+00 -2.45819e+00
 -2.25748e+00 -2.07287e+00 -1.90309e+00 -1.74698e+00 -1.60347e+00 -1.47155e+00
 -1.35032e+00 -1.23892e+00 -1.13657e+00 -1.04256e+00 -9.56212e-01 -8.76916e-01
 -8.04107e-01 -7.37263e-01 -6.75904e-01 -6.19587e-01 -5.67904e-01 -5.20481e-01
 -4.76971e-01 -4.37056e-01 -4.00443e-01 -3.66864e-01 -3.36070e-01 -3.07834e-01
 -2.81945e-01 -2.58211e-01 -2.36455e-01 -2.16515e-01 -1.98240e-01 -1.81493e-01
 -1.66148e-01 -1.52088e-01 -1.39208e-01 -1.27409e-01 -1.16601e-01 -1.06703e-01
 -9.76381e-02 -8.93371e-02 -8.17362e-02 -7.47769e-02 -6.84057e-02 -6.25733e-02
 -5.72345e-02 -5.23479e-02 -4.78755e-02 -4.37826e-02 -4.00371e-02 -3.66099e-02
 -3.34742e-02 -3.06052e-02 -2.79806e-02 -2.55796e-02 -2.33834e-02 -2.13746e-02
 -1.95373e-02 -1.78570e-02 -1.63203e-02 -1.49152e-02 -1.36303e-02 -1.24555e-02
 -1.13814e-02 -1.03994e-02
 -0.00000e+00 -3.90949e+00 -7.09510e+00 -9.65735e+00 -1.16844e+01 -1.32533e+01
 -1.44315e+01 -1.52780e+01 -1.58441e+01 -1.61744e+01 -1.63077e+01 -1.62778e+01
 -1.61136e+01 -1.58402e+01 -1.54794e+01 -1.50496e+01 -1.45667e+01 -1.40443e+01
 -1.34937e+01 -1.29247e+01 -1.23454e+01 -1.17626e+01 -1.11819e+01 -1.06079e+01
 -1.00443e+01 -9.49415e+00 -8.95978e+00 -8.44299e+00 -7.94508e+00 -7.46701e+00
 -7.00935e+00 -6.57244e+00 -6.15635e+00 -5.76096e+00 -5.38602e+00 -5.03113e+00
 -4.69578e+00 -4.37941e+00 -4.08137e+00 -3.80097e+00 -3.53751e+00 -3.29026e+00
 -3.05847e+00 -2.84139e+00 -2.63830e+00 -2.44845e+00 -2.27115e+00 -2.10568e+00
 -1.95139e+00 -1.80762e+00 -1.67375e+00 -1.54917e+00 -1.43331e+00 -1.32562e+00
 -1.22559e+00 -1.13272e+00 -1.04654e+00 -9.66611e-01 -8.92510e-01 -8.23844e-01
 -7.60243e-01 -7.01357e-01 -6.46858e-01 -5.96439e-01 -5.49812e-01 -5.06705e-01
 -4.66868e-01 -4.30064e-01 -3.96073e-01 -3.64690e-01 -3.35723e-01 -3.08993e-01
 -2.84336e-01 -2.61595e-01 -2.40629e-01 -2.21302e-01 -2.03491e-01 -1.87081e-01
 -1.71966e-01 -1.58046e-01 -1.45229e-01 -1.33431e-01 -1.22573e-01 -1.12581e-01
 -1.03389e-01 -9.49345e-02 -8.71589e-02 -8.00093e-02 -7.34365e-02 -6.73950e-02
 -6.18427e-02 -5.67408e-02 -5.20535e-02 -4.77478e-02 -4.37932e-02 -4.01615e-02
 -3.68270e-02 -3.37656e-02 -3.09554e-02 -2.83762e-02 -2.60092e-02 -2.38373e-02
 -2.18446e-02 -2.00165e-02 -1.83397e-02 -1.68019e-02 -1.53915e-02 -1.40983e-02
 -1.29127e-02 -1.18257e-02 -1.08293e-02 -9.91608e-03 -9.07911e-03 -8.31212e-03
 -7.60933e-03 -6.96542e-03 -6.37552e-03 -5.83514e-03 -5.34018e-03 -4.88685e-03
 -4.47169e-03 -4.09151e-03 -3.74340e-03 -3.42468e-03 -3.13289e-03 -2.86577e-03
 -2.62126e-03 -2.39746e-03 -2.19263e-03 -2.00518e-03 -1.83364e-03 -1.67668e-03
 -1.53307e-03 -1.40168e-03 -1.28147e-03 -1.17151e-03 -1.07093e-03 -9.78925e-04
 -8.94779e-04 -8.17824e-04 -7.47448e-04 -6.83094e-04 -6.24249e-04 -5.70445e-04
 -5.21253e-04 -4.76280e-04""")
        ret = load(fp)
        self.assertAlmostEqual(
            ret,
            {'version': '1.1',
             'points': [{'dt': 0.1,
                         'sv1': [-0.0, -85.3627, -154.92, -210.866, -255.125, -289.382, -315.109, -333.592, -345.952, -353.164, -356.075, -355.421, -351.835, -345.867, -337.989, -328.605, -318.061, -306.653, -294.632, -282.208, -269.559, -256.833, -244.153, -231.62, -219.314, -207.302, -195.634, -184.35, -173.479, -163.04, -153.047, -143.507, -134.422, -125.789, -117.602, -109.853, -102.531, -95.6232, -89.1155, -82.9932, -77.2407, -71.8419, -66.7808, -62.041, -57.6065, -53.4613, -49.5899, -45.977, -42.6081, -39.4689, -36.5458, -33.8256, -31.2959, -28.9446, -26.7605, -24.7327, -22.851, -21.1057, -19.4877, -17.9884, -16.5997, -15.3139, -14.124, -13.0231, -12.005, -11.0638, -10.1939, -9.39033, -8.64815, -7.9629, -7.33042, -6.74679, -6.2084, -5.71186, -5.25406, -4.83206, -4.44317, -4.08487, -3.75483, -3.45089, -3.17104, -2.91343, -2.67635, -2.45819, -2.25748, -2.07287, -1.90309, -1.74698, -1.60347, -1.47155, -1.35032, -1.23892, -1.13657, -1.04256, -0.956212, -0.876916, -0.804107, -0.737263, -0.675904, -0.619587, -0.567904, -0.520481, -0.476971, -0.437056, -0.400443, -0.366864, -0.33607, -0.307834, -0.281945, -0.258211, -0.236455, -0.216515, -0.19824, -0.181493, -0.166148, -0.152088, -0.139208, -0.127409, -0.116601, -0.106703, -0.0976381, -0.0893371, -0.0817362, -0.0747769, -0.0684057, -0.0625733, -0.0572345, -0.0523479, -0.0478755, -0.0437826, -0.0400371, -0.0366099, -0.0334742, -0.0306052, -0.0279806, -0.0255796, -0.0233834, -0.0213746, -0.0195373, -0.017857, -0.0163203, -0.0149152, -0.0136303, -0.0124555, -0.0113814, -0.0103994],
                         'sv3': [],
                         'nt1': 146,
                         'slip2': -45.65,
                         'dip': 90.0,
                         'slip3': 0.0,
                         'rake': 0.0,
                         'sv2': [-0.0, -3.90949, -7.0951, -9.65735, -11.6844, -13.2533, -14.4315, -15.278, -15.8441, -16.1744, -16.3077, -16.2778, -16.1136, -15.8402, -15.4794, -15.0496, -14.5667, -14.0443, -13.4937, -12.9247, -12.3454, -11.7626, -11.1819, -10.6079, -10.0443, -9.49415, -8.95978, -8.44299, -7.94508, -7.46701, -7.00935, -6.57244, -6.15635, -5.76096, -5.38602, -5.03113, -4.69578, -4.37941, -4.08137, -3.80097, -3.53751, -3.29026, -3.05847, -2.84139, -2.6383, -2.44845, -2.27115, -2.10568, -1.95139, -1.80762, -1.67375, -1.54917, -1.43331, -1.32562, -1.22559, -1.13272, -1.04654, -0.966611, -0.89251, -0.823844, -0.760243, -0.701357, -0.646858, -0.596439, -0.549812, -0.506705, -0.466868, -0.430064, -0.396073, -0.36469, -0.335723, -0.308993, -0.284336, -0.261595, -0.240629, -0.221302, -0.203491, -0.187081, -0.171966, -0.158046, -0.145229, -0.133431, -0.122573, -0.112581, -0.103389, -0.0949345, -0.0871589, -0.0800093, -0.0734365, -0.067395, -0.0618427, -0.0567408, -0.0520535, -0.0477478, -0.0437932, -0.0401615, -0.036827, -0.0337656, -0.0309554, -0.0283762, -0.0260092, -0.0238373, -0.0218446, -0.0200165, -0.0183397, -0.0168019, -0.0153915, -0.0140983, -0.0129127, -0.0118257, -0.0108293, -0.00991608, -0.00907911, -0.00831212, -0.00760933, -0.00696542, -0.00637552, -0.00583514, -0.00534018, -0.00488685, -0.00447169, -0.00409151, -0.0037434, -0.00342468, -0.00313289, -0.00286577, -0.00262126, -0.00239746, -0.00219263, -0.00200518, -0.00183364, -0.00167668, -0.00153307, -0.00140168, -0.00128147, -0.00117151, -0.00107093, -0.000978925, -0.000894779, -0.000817824, -0.000747448, -0.000683094, -0.000624249, -0.000570445, -0.000521253, -0.00047628],
                         'dep': 4.5624,
                         'lat': 33.3779,
                         'lon': -115.7455,
                         'slip1': -996.72,
                         'area': 1027890000.0,
                         'nt2': 146,
                         'stk': 312.0,
                         'tinit': 1.8918,
                         'nt3': 0}]})

    def test_load_unsupported(self):
        fp = io.StringIO("""0.0
PLANE 1
 -118.5150   34.3440    20    25    20.00    25.00
 122   40     5.00     0.00    18.75
POINTS 2
 -118.6049   34.3864    5.3214  122   40  1.00000e+10     7.4390  1.00000e-01
  90    18.67     16     0.00      0     0.00      0
  0.00000e+00  1.21778e+00  2.43557e+00  9.76408e-01  8.95040e-01  8.13673e-01
  7.32306e-01  6.50938e-01  5.69571e-01  4.88204e-01  4.06837e-01  3.25469e-01
  2.44102e-01  1.62735e-01  8.13673e-02  0.00000e+00
 -118.5956   34.3816    5.3214  122   40  1.00000e+10     7.1882  1.00000e-01
  90    46.59     16     0.00      0     0.00      0
  0.00000e+00  1.21778e+00  2.43557e+00  9.76408e-01  8.95040e-01  8.13673e-01
  7.32306e-01  6.50938e-01  5.69571e-01  4.88204e-01  4.06837e-01  3.25469e-01
  2.44102e-01  1.62735e-01  8.13673e-02  0.00000e+00""")
        with self.assertRaises(NotImplementedError):
            load(fp)


if __name__ == '__main__':
    unittest.main()
